Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії






Практична робота №2
з дисципліни: «Архітектура програмного забезпечення»
на тему «Архітектура відомих програмних систем»






Перевірив:
ст. викл. каф. ПІ
Сокорчук І.П.	Виконала:
ст. гр. ПЗПІ-22-7
Лаврович Оксана Степанівна





Харків 2025
1 ІСТОРІЯ ЗМІН

	Зміни в документі нотуються до таблиці 1.1.	

Таблиця 1.1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	25.05.25	0.1	Створено розділ «Історія змін»
2	25.05.25	0.1	Створено розділ «Завдання до практичної роботи»
3	25.05.25	0.1	Створено розділ «Опис виконаної роботи»
4	25.05.25	0.1	Створено розділ «Висновки»
5	25.05.25	0.1	Додано додаток А з посиланням на відеоролик
6	25.05.25	0.1	Додано додаток Б зі слайдами презентації

2 ЗАВДАННЯ
Завдання на практичне заняття 2:
1.	Підготувати доповідь на тему: «Архітектура програмної системи Netflix»;
2.	Створити та оформити слайди презентації доповіді;
3.	Створити та опублікувати на YouTube відеозапис доповіді;
4.	Оформити та завантажити на dl.nure.ua звіт до виконаної роботи;
5.	Створити для виконання завдань з дисципліни GitHub репозиторій iз вказаним на https://dl.nure.ua іменем та з головною гілкою main;
6.	Створити у корені створеного репозиторію файл README.md з вказаним далі змістом та вказані далі директорії для окремих завдань;
7.	Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract2 у репозиторії GitHub;
8.	Завантажити у вказану далі піддиректорію увесь програмний код, який розглядається у доповіді ПЗ2.
 
3 ОПИС ВИКОНАНОЇ РОБОТИ

Spotify є однією з найпопулярніших музичних стрімінгових платформ у світі, яка надає користувачам можливість прослуховувати мільйони треків онлайн, створювати плейлисти, відкривати нову музику та ділитися нею з іншими. Spotify поєднує складну архітектуру мікросервісів, ефективну систему доставки контенту, потужні алгоритми рекомендацій та аналітики, що дозволяє обслуговувати сотні мільйонів користувачів у реальному часі.
Архітектура програмного забезпечення Spotify є типовим прикладом масштабованої розподіленої системи, яка базується на мікросервісній парадигмі. Такий підхід дозволяє розділити функціональність платформи на окремі незалежні сервіси, кожен з яких відповідає за конкретний функціонал: керування користувачами, формування плейлистів, обробку стрімінгового трафіку чи побудову рекомендацій. Для реалізації мікросервісів Spotify переважно використовує мову програмування Java у поєднанні з фреймворком Spring, а також мови Scala і JavaScript (Node.js), що дозволяє реалізовувати високопродуктивні та масштабовані бекенд-рішення.
Організаційна архітектура Spotify популяризує модель Squad/Tribe/Guild, де команди Squads об’єднані у Tribes, Chapters і Guilds. Це дозволяє масштабовано управляти командами, не втрачаючи гнучкості й автономії, а також сприяє впровадженню DevOps і Continuous Delivery. Відповідно до цієї моделі, кожна команда має повну відповідальність за свій мікросервіс і може самостійно обирати стек технологій.
Ключовим компонентом інфраструктури Spotify є система обробки подій у реальному часі на основі Apache Kafka. Даний брокер повідомлень забезпечує надійну, горизонтально масштабовану передачу потокових даних між сервісами, що є критично важливим для обробки взаємодії користувачів із сервісом, зокрема відстеження відтворення треків, лайків тощо. Для обробки цих подій у реальному часі також застосовуються платформи Apache Samza та Apache Storm. Дані передаються у високопродуктивні сховища, головним чином Apache Cassandra, яка була обрана після масштабної міграції з PostgreSQL у 2015 році. Причиною переходу стала необхідність забезпечити горизонтальне масштабування та високу доступність при експоненційному зростанні обсягу даних і кількості користувачів (на той момент понад 35 млн активних користувачів). Міграція була реалізована без суттєвого простою за допомогою техніки dark loading.
Загальна система зберігання даних включає декілька рішень залежно від призначення: Cassandra використовується для розподіленого зберігання структурованих даних, Amazon S3 – для статичного контенту (аудіофайли, обкладинки альбомів), а HBase може використовуватись для аналітичних сценаріїв з високою пропускною здатністю. Для прискорення відповіді системи на запити до часто використовуваних даних впроваджено кешування на основі Redis або Memcached, а також edge-кешування за допомогою CDN для забезпечення низької затримки при доставці контенту.
Фронтенд-частина платформи реалізована з використанням React.js, а також інструментів Redux та Sass. Це дозволяє створювати реактивні інтерфейси з високою продуктивністю. Комунікація між мікросервісами реалізується за допомогою RESTful API або gRPC, що забезпечує ефективну передачу повідомлень та даних. Для керування вхідними запитами та маршрутизації використовується API Gateway, який також виконує функції балансування навантаження, обмеження запитів та забезпечення безпеки.
Spotify активно використовує хмарні технології: початково інфраструктура розгорталась на AWS, проте пізніше була перенесена на Google Cloud Platform. Контейнеризація застосовується за допомогою Docker, а для оркестрації контейнерів використовується Kubernetes. Це дозволяє масштабувати сервіси відповідно до навантаження та забезпечити надійне управління життєвим циклом контейнерів. Також Spotify дотримується DevOps-підходів з активним використанням CI/CD-процесів, що забезпечує оперативне розгортання оновлень без порушення безперервності сервісу.
Для моніторингу та логування застосовуються такі інструменти, як Grafana, Prometheus та стек ELK (Elasticsearch, Logstash, Kibana). Ці рішення забезпечують збір, агрегацію, візуалізацію метрик і логів у реальному часі, що дозволяє інженерам оперативно виявляти аномалії у роботі системи.
Рекомендаційна система є невід’ємною частиною платформи Spotify. Вона побудована на основі алгоритмів машинного навчання, зокрема колаборативної фільтрації, а також використовує методи обробки природної мови (NLP) для класифікації контенту, зокрема подкастів. Моделі навчаються на історії прослуховувань, взаємодії користувачів із контентом, метаданих композицій, що дозволяє генерувати персоналізовані добірки (наприклад, Discover Weekly або Daily Mix). Зокрема, Spotify застосовує такі алгоритми, як Matrix Factorization (наприклад, ALS) та Deep Learning моделі, а також використовує Content-Based Filtering і гібридні підходи. Для моделювання застосовується Google Cloud AI/ML Platform. Відомим є факт, що Spotify придбав компанію The Echo Nest, яка спеціалізується на музичній аналітиці, і інтегрував її технології у власну систему.
У Spotify також впроваджено потужну систему CI/CD з власними інструментами, Зокрема, вони використовують Backstage — open-source платформу для управління внутрішніми сервісами та створення порталів розробника. Також Spotify має власну централізовану CI/CD систему під назвою Tingle, яка автоматизує збірку, тестування, пакування та розгортання змін у продакшн. 
Щодо безпеки, Spotify використовує OAuth 2.0 для авторизації API, TLS для безпечної передачі даних та власну систему SSO для внутрішніх інструментів.
Варто відзначити, що у 2023 році Spotify завершив масштабну міграцію на систему збирання Bazel для iOS-додатка, а у 2021 році уніфікував десктопну та веб-версії клієнта, що дозволило зменшити технічний борг і покращити підтримку функціональності.
Spotify використовує двокомпонентну модель монетизації: безкоштовну версію з рекламою (Free) та платну підписку (Premium). Free-версія має обмежений функціонал і прибуток генерується через таргетовану рекламу. Premium надає доступ до розширених функцій (прослуховування без реклами, офлайн-режим, пропуски треків) і включає різні тарифи: індивідуальний, сімейний, студентський та Duo. Оплата здійснюється через Stripe, PayPal, Apple Pay, Google Pay з дотриманням стандартів PCI DSS. Також Spotify впроваджує нові формати: “Freemium+” з менш нав’язливою рекламою та платний доступ до подкастів, аудіокниг і відео.
У порівнянні з іншими популярними платформами — YouTube Music та Apple Music —Spotify вирізняється розвиненими алгоритмами рекомендацій, які базуються на ШІ, колаборативній фільтрації, емоційних маркерах та поведінкових даних. На відміну від нього, YouTube Music більше орієнтується на історію переглядів відео, а Apple Music — на редакторські добірки.

Серед інновацій Spotify — Daily Mix, Discover Weekly, Wrapped і Canvas. YouTube Music фокусується на відеоінтеграції, Apple Music — на якості звуку (lossless, spatial audio) та інтеграції з iOS. Spotify працює на масштабованій хмарній мікросервісній архітектурі, що забезпечує високу продуктивність. У свою чергу, YouTube Music використовує сервіси Google Cloud, а Apple Music — внутрішню інфраструктуру Apple. У плані кросплатформеності Spotify підтримує найбільшу кількість пристроїв. Соціальні функції, як-от спільні плейлисти та обмін музикою, також надають Spotify перевагу над конкурентами.
 
4	ВИСНОВКИ

Загалом, архітектура Spotify забезпечує стійку, масштабовану, низьколатентну інфраструктуру для стрімінгу мультимедійного контенту. Висока продуктивність досягається завдяки сучасним технологіям обробки подій, горизонтальному масштабуванню, ефективному кешуванню, гнучкому мікросервісному дизайну та автоматизованим процесам розгортання, що забезпечує мільйонам користувачів якісний досвід прослуховування музики та подкастів у будь-який момент і з будь-якої точки світу.
 
ДОДАТОК А
Відеозапис та хронологічний опис

Відеозапис доповіді на YouTube: https://youtu.be/yGDYI8ngka8
Хронологічний опис відеозапису:
00:00 – Вступ
00:42 – Мікросервісна архітектура Spotify
01:24 – Організаційна модель Squad/Tribe/Guild
01:51 – Система обробки подій у реальному часі
02:52 – Система зберігання та кешування даних
03:30 – Фронтенд-архітектура та API
04:03 – Хмарна інфраструктура 
04:41 – Моніторинг та логування
05:02 – Рекомендаційна система
06:02 – CI/CD та внутрішні інструменти
06:27 – Безпека та авторизація
06:59 – Монетизаційна модель Spotify
07:39 – Порівняння з конкурентами
08:43 – Висновки
09:14 – Використані джерела 
ДОДАТОК Б
Слайди презентації
 
Рисунок Б.1 – Титульний слайд
 
Рисунок Б.2 – Вступ
 
Рисунок Б.3 – Мікросервісна архітектура Spotify
 
Рисунок Б.4 – Організаційна модель Squad/Tribe/Guild
 
Рисунок Б.5 – Система обробки подій у реальному часі
 
Рисунок Б.6 – Система зберігання та кешування даних
 
Рисунок Б.7 – Фронтенд-архітектура клієнтської частини Spotify
 
Рисунок Б.8 – Хмарна інфраструктура та оркестрація контейнерів
 
Рисунок Б.9 – Засоби моніторингу та логування у Spotify
 
Рисунок Б.10 – Архітектура та алгоритми рекомендаційної системи
 
Рисунок Б.11 – Власні інструменти для CI/CD 
 
Рисунок Б.12 – Система безпеки та авторизації
 
Рисунок Б.13 - Монетизаційна модель Spotify
 
Рисунок Б.14 – Порівняльний аналіз Spotify з іншими платформами
 
Рисунок Б.15 – Висновки 
 
Рисунок Б.16 – Використані джерела

